/*
    Author:  Justin Nguyen
    Created: 5/25/2016
*/

1. Pre-processor Directives
        --> these tell the compiler to perform
            certain tasks before run time
        --> processes directives (e.g. #include)
        --> Macros
                --> a rule defining how to replace input text with output text
        --> Object-like Macros
                --> uses subsitution text (e.g. #define num 100)
                --> dangerous and not used much
2. Output Operator (<<)
3. L-values vs. R-values
        --> values on left/right side of equals sign
4. Assignment vs. Initialization
        --> assignment
                --> declaration: int x;
                --> assignment:  x = 5;
        --> initialization
                --> int x = 5 (one step)
5. Status Codes
        --> e.g. main returns 0 back to the Operating System
                 positive return values indicate failure
6. Making the computer understand our programs
        assembly --> assembler --> machine code
        high level language --> compiler/interpreter
7. Using a compiler
        high level (.c/.cpp) --> compiler
        compiler (.o) --> linker --> executable (.exe)
8. Using an interpreter
        high level (.py) --> interpreter
        interpreter --> executable (.exe)
9. Differences
        Interpreters
          --> execute the code w/o compiling into machine code
          --> more flexible, but less efficient when running programs
          --> needed every time you run a program, even if no changes
        Compilers
          --> just use the same .exe if no changes

