/*
    Author:  Justin Nguyen
    Created: 6/7/2016
*/

0. Extraction Operator (>>)
    --> How extraction from input buffer works
        (buffer holds input while input is waiting to be extracted)
        
    --> If there is data already in the input buffer, 
        that data is used for extraction.
    --> If the input buffer contains no data, the user is asked to 
        input data for extraction (this happens most of the time)
    --> When the user hits enter, a ‘\n’ character will be placed in the input buffer.
    --> Extraction operator ">>" extracts as much data from the 
        input buffer as it can into the variable (ignoring any 
        leading whitespace characters, such as spaces, tabs, or ‘\n’)
    --> Any data that can not be extracted is 
        left in the input buffer for the next extraction.
    --> Extraction succeeds if at least one character can be extracted

1. Four Main Input Errors
    --> Meaningless Input (expecting a,b,c but received d)
        (program doesn't handle this case)
            --> if/else statement covers this 
                (if bad input: print error message and ask for new input)
    --> Extra Input (expecting one character, but received two chars)
            --> std::cin.ignore(32767,'\n') covers this
    --> Numerical Value Overflowed (gave a number too large or small)
            --> std::cin goes into failure mode, fix with solution below
    --> Mismatched Data (expecting an int, but given a string)
        --> if (std::cin.fail()) {
                std::cin.clear(); std::cin.ignore(32767, '\n')
            }
    
2. Clearing the Input Buffer
    --> std::cin
    --> input is stored into a buffer and extracted with << operator
    --> anything not extraced remains in the buffer
        (which can cause problems)
    --> clear the buffer using std::cin.ignore
        std::cin.ignore(32767, '\n')
        --> clear up to 32767 characters in the buffer until
            the '\n' character is removed
    --> use this to ignore extra input (call after every std::cin call)
    
3. Getting Back to Normal std::cin Mode
    --> once an extraction fails, std::cin goes into
        "failure mode" and won't extract further input
    --> so get back into normal mode:
        if (std::cin.fail()) { // did extraction fail?
            std::cin.clear(); // return to normal mode
            std::cin.ignore(32767, '\n'); // clear bad input
        }
        
4. Numerical Overflow
    --> "failure mode", same fix
    
5. Things to Remember
    --> need a std::cin.ignore(32767, '\n') for every input read
    --> need an if (std::cin.fail()) and std::cin.clear(); std::cin.ignore(32767, '\n');
        when storing input into non-char/string variable types
        --> chars and strings can hold any input value
        --> numerical data types (ints, doubles, etc) cannot, obviously
        --> else statement still needs a std::cin.ignore(32767, '\n')
    --> need else statement for every if statement (robustness)
    
    
