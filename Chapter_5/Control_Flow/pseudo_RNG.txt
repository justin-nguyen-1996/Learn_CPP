/*
    Author:  Justin Nguyen
    Created: 6/7/2016
*/

1. Pseudo Random Number Generation (PRNG)
    --> computers can't actually create random values/events
        (everything is a zero or one)
    --> use alogorithms and complex number generation to simulate "randomness"
    --> take a seed and perform multiple mathematical operations on it
    --> each number is generated from the previous number in a deterministic way
        --> given any starting seed number, PRNGs will always generate the 
            same sequence of numbers from that seed
    
2. srand() and rand()
    --> #include <cstdlib>
    --> srand(int seed); --> seeds your Pseudo RNG algorithm
    --> rand(); --> produces a "random" number

3. #include <ctime>
    --> time(0) --> produces the time's second hand number
    --> most people seed their PRNG with this
    
4. Good PRNGs
    --> need roughly uniform distribution (no bias)
    --> next generated value should be unpredictable
        (num += 1 is uniform but not random)
    --> good dimensional distribution
        (don't return all random highs or all random lows)
        (might be uniform and unpredictable, but still biased)
    --> long period for all generated values
        (doesn't repeat cycle of values for a good amount of time)
        
5. Mersenne Twister
    --> rand() is a mediocre number generator
    --> #include <random>
    --> std::random_device rd; // Use a hardware entropy source if available, otherwise use PRNG
    --> std::mt19937 mersenne(rd()); // initialize our mersenne twister with a random seed
    --> mersenne() is much better (larger range and period)
    
