/*
 * Author:  Justin Nguyen
 * Created: 8/10/2016
 */
 
1. Overwrite Inherited Functions
    --> the same as function overloading
    --> redefining a function in the derived class overwrites
        the function's access specifications
        
2. Add Functionality
    --> what if don't want to completely replace base class's
        method but instead want to add to its functionality?
    --> example:
        void Identify() {
            Base::Identify(); // call Base::Identify() first
            cout << "I am a Derived"; // then identify ourselves
        }
        
3. Changing Access Levels
    --> class Base {
            protected: void PrintValue() { cout << m_nValue; }
        };
    --> class Derived: public Base {
            public: using Base::PrintValue;
        };
    --> Note:
        --> there are no parentheses at the end of PrintValue
        --> Derived class can only change access level of
            functions that it already has access too
            (i.e. can't change private to public)

