/*
 * Author:  Justin Nguyen
 * Created: 8/10/2016
 */
 
1. Protected Keyword
	--> an access specifier (like public or private) that
		lets derived classes access those members

2. Public vs. Private vs. Protected
	--> any can access public
	--> only base class can access private
	--> base and derived classes can access protected

3. Something to Note
	--> Classes can access their own members regardless of the access specifier
	--> Derived class uses its immediate parent's access specifications
		--> Derived classes can't directly access private members of the base class
		--> Can only access public and protected members directly
	--> Outside access uses the access specifiers of the class being accessed
		--> Outside objects can only access public members directly

4. Public Inheritance
	
	class Base {
		public: int m_nPublic;
		private: int m_nPrivate;
		protected: int m_nProtected;
	};
 
	class Pub: public Base {
	    Pub() {
	        // The derived class always uses the immediate parent's class access specifications
	        m_nPublic = 1; // okay: anybody can access public members
	        m_nPrivate = 2; // not okay: derived classes can't access private members in the base class!
	        m_nProtected = 3; // okay: derived classes can access protected members
	    }
	};
	 
	int main() {
	    // Outside access uses the access specifiers of the class being accessed.
	    // In this case, the access specifiers of cPub.
	    Pub cPub; 
	    cPub.m_nPublic = 1; // okay: anybody can access public members
	    cPub.m_nPrivate = 2; // not okay: can not access private members from outside class
	    cPub.m_nProtected = 3; // not okay: can not access protected members from outside class
	}
	
5. Private Inheritance

	class Base {
		public: int m_nPublic;
		private: int m_nPrivate;
		protected: int m_nProtected;
	};
 
	class Pri: private Base {
	    Pri() {
	        // The derived class always uses the immediate parent's class access specifications
	        m_nPublic = 1; // okay: anybody can access public members
	        m_nPrivate = 2; // not okay: derived classes can't access private members in the base class!
	        m_nProtected = 3; // okay: derived classes can access protected members
	    }
	};
	 
	int main() {
        // Outside access uses the access specifiers of the class being accessed.
        Pri cPri;
        cPri.m_nPublic = 1; // not okay: m_nPublic is now a private member when accessed through Pri
        cPri.m_nPrivate = 2; // not okay: can not access private members from outside class
        cPri.m_nProtected = 3; // not okay: m_nProtected is now a private member when accessed through Pri
     
        // However, we can still access Base members as normal through Base:
        Base cBase;
        cBase.m_nPublic = 1; // okay, m_nPublic is public
        cBase.m_nPrivate = 2; // not okay, m_nPrivate is private
        cBase.m_nProtected = 3; // not okay, m_nProtected is protected
    }

