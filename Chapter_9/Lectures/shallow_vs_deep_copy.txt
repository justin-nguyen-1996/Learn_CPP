/*
 * Author:  Justin Nguyen
 * Created: 8/5/2016
 */
 
1. Shallow Copying
    --> when the members are copied verbatim
    --> dangerous when dealing with dynamic memory
        --> copies will copy the address held by the pointer
            (no additional memory is allocated)
            (so now we have two pointers to the same data)
            
2. This will break
    --> int main() {
            MyString hello("Hello, world!");
            
            {
                MyString copy = hello; // use default copy constructor
            } // copy gets destroyed here
         
            std::cout << hello.getString() << '\n'; // breaks here
        }
    
    --> once copy goes out of scope due to the braces,
        the pointers will be deleted so we are left with
        hello.m_data being a dangling pointer
        
3. Deep Copying
    --> copies the values such that the copy lies in a
        different memory location from the original

4. Copy Constructor with deep copying
    --> need to 
        --> check if the original is null,
        --> allocate memory for the copy
        --> copy the values over one at a time
        
    --> example
            MyString::MyString(const MyString& str) {
                m_length = str.m_length;
                
                if (str.m_data) {
                    m_data = new char[m_length];
                    
                    for (int i = 0; i < m_length; ++i) {
                        m_data[i] = str.m_data[i];
                    }
                } else {
                    m_data = 0;
                }
            }
    
5. Assignment Operator with deep copying
    --> need to
        --> check against self-assignment
        --> deallocate the current string (to avoid memory leaks)
        --> same steps as for copy constructor
        --> return *this for operator chaining
        --> return a reference since this operator will 
            only be called if the object already exists

    --> example of overloaded assignment operator using deep copy
            MyString& Mystring::operator= (const Mystring& src) {
                if (this == &src) { return *this; }
                
                delete[] m_data;
                
                if (src.m_data) {
                    m_data = new char[m_length];
                    for (int i = 0; i < m_length; ++i) {
                        m_data[i] = src.m_data[i];
                    }
                } else {
                    m_data = 0;
                }
                
                return *this;
            }

