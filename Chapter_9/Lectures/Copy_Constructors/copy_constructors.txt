/*
 * Author:  Justin Nguyen
 * Created: 8/4/16
 */
 
1. Copy Constructors
    --> like the default constructor, C++ will
        automatically make one for you
    --> default copy constructors simply make the
        copy's members the same as the copied object
    --> example:
        Fraction(const Fraction &fraction) :
            m_numerator(fraction.m_numerator),
            m_denominator(fraction.m_denominator) {}
            
2. Eliding
    --> when the compiler optimizes your 
        constructor calls in the case of redundancy
    --> Fraction fiveThirds(Fraction(5, 3));
        Fraction fiveThirds(5, 3);
    --> skips the call to the copy constructor
    
3. Use uniform initialization because it is more efficient
    --> doesn't invoke unnecessary constructor calls
    --> doesn't create unnecessary objects 
    
4. Hidden copy constructor calls (implicit)
    --> Fraction makeNegative(Fraction f) {
            f.setNumerator(-f.getNumerator());
            return f;
        }
         
        int main() {
            Fraction fiveThirds(5, 3);
            std::cout << makeNegative(fiveThirds);
        }
    
    --> one copy ctor call for makeNegative(fiveThirds)
    --> one copy ctor call for the return value
    
    --> change to this:
        Fraction& makeNegative(Fraction& f);
        
5. Explicit Keyword
    --> put this in front of constructors' names to
        prevent implicit conversion
    --> explicit MyString(int x) {
    		m_string.resize(x);
    	}
 
    	MyString(const char *string) {
    		m_string = string;
    	}
     
        int main() {
        	MyString x = 'x'; // compile error
        	std::cout << x;
        }

        
