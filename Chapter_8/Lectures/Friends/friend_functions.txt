/*
    Author:  Justin Nguyen
    Created: 7/13/2016
*/

1. Friend Functions
    --> function that can access the private members of 
        a class as though it were a member of that class
    --> must pass the friend fxn an object to modify
        (since not a member function)
    
2. Friend Function Syntax
    --> class Temperature {
            private:
                int m_temp;
            public:
                friend void printTemperature(const Temperature &temperature);
        };
        
        void printTemperature(const Temperature &temperature) {
            std::cout << temperature.m_temp << "\n";
        }
        
    --> when defining outside the class,
        --> 1. don't use the friend keyword
            2. don't use a scope resolution (::)
                --> it's a "friend" of that class (isn't actually a member fxn)

3. Class Prototype
    --> used to let the compiler know we are going to define the class later
        (same utility as a function prototype)
    --> used when using classes with multiple friends
        (can't put one class above the other since each class
         references at least two total classes)

    --> 
        class Temperature;
        
        class Humidity {
            public:
                friend void printWeather(Temperature &t, Humidity &h);
        };
        
        class Temperature {};
        
    --> syntax is always class ClassName
    

