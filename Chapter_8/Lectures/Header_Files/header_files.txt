/*
	Author:  Justin Nguyen
	Created: 7/11/2016
*/

1. Separating declaration and implementation
	--> if you move the definition out of the class definition,
		you have to prepend the functions with the class name
	--> you still keep the function declarations inside the class
	--> but now you define the class using the scope resolutor (::)

2. Getter/Setter definitions are usually still left in
   the class definition b/c they are simple one-liners

3. Why to use header files
	--> If you put the code in the header file and #include it everywhere
		then what happens if you need to change the .h file?
		--> you would have to recompile it in every file the included it (slow)
		--> also potential for excessive code bloat

4. What to put in header files
	--> class declarations
	--> default parameters

5. Libraries
	--> you normally have to compile the .cpp file into any project that
		uses the .h file so that the program knows how the classes are implemented
	--> but you never have to add stuff like "iostream.cpp or string.cpp"
		into your projects because they are contained in the standard C++ library
	--> you never see the code implementation, only the declarations
	
	--> libraries are precompiled files that are linked in at link time
	--> you only need to use the declarations from the .h files so that
		the compiler can tell you if you are writing syntactically valid code
		
	--> reasons for using libraries
	--> 1. it’s faster to link a precompiled library than to recompile it every time you need it
		2. precompiled libraries can be distributed once, whereas compiled code
		   gets compiled into every executable that uses it (inflating code size)
		3. intellectual property reasons (you don’t want people stealing your code)

