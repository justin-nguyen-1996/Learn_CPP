/*
    Author:  Justin Nguyen
    Created: 7/12/2016
*/

1. Static Member Functions
    --> what happens if you make a static member private?
        --> normally use a public accessor function
        --> but then you'd have to make an instance of the class to use the fxn
        --> make the function static to avoid this
    --> class Somthing {
            private:
                static int m_value;
            public:
                static int getValue() { return m_value; }
        };

2. Static Member Functions have no *this pointer
    --> *this always points to the object
        (but static member functions belong to the
         class and have no object to work on)

3. Static Member Functions can only access static member variables
    --> non-static member variables belong to particular instances of the class
        (and static member functions have no object to work on)
        
4. Defining Static Member Functions outside of the class
    --> don't need keyword static on them
    --> class Something {
            private:
                static int s_val;
            public:
                static int getVal() {}
        };
        
        int Something::s_val = 1;
        int Something::getVal() {
            return s_val;
        }

