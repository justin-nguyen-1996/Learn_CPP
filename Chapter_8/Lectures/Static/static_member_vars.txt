/*
    Author:  Justin Nguyen
    Created: 7/12/2016
*/

1. Static Member Variables
    --> static member variables belong to the class and
        are therefore shared by all objects of the class
        
    --> class Something {
            public:
                static int s_value;
        }
        
        int Something::s_value; // THIS LINE IS NEEDED
        
        Something::s_value = 1; // s_value = 1
        Something first; first.s_value += 1; // s_value = 2
        Something second; second.s_value += 1; // s_value = 3
        
    --> exist even if no objects have been created yet

2. Defining Static Member Variables
    --> after declaring a static member, you have to define it
    --> static members do not belong to individual class objects, so you have to
        define the static member outside of the class in the global scope
    --> Do not put the static member definition in a header file
        (if that header file gets included more than once, 
         youâ€™ll end up with multiple definitions, which will cause a compile error)
    --> NOTE: the definition is not subject to access controls
         
3. Why use static member variables
    --> unique ID generator
        
        class Something
        {
        private:
            static int s_idGenerator;
            int m_id;
         
        public:
            Something() { m_id = s_idGenerator++; } // grab the next value from the id generator
         
            int getID() const { return m_id; }
        };
         
        // Note that we're defining and initializing s_idGenerator even though it is declared as private above.
        // This is okay since the definition isn't subject to access controls.
        int Something::s_idGenerator = 1; // start our ID generator with value 1
         
        int main()
        {
            Something first;
            Something second;
            Something third;
         
            std::cout << first.getID() << '\n';
            std::cout << second.getID() << '\n';
            std::cout << third.getID() << '\n';
            return 0;
        }
        
    --> save memory (if all objects use the same variable then only make one of those variables)
        (this would mean something like a shared lookup table)

