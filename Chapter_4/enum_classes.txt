/*
    Author:  Justin Nguyen
    Created: 6/2/2016
*/

1. Problem with Enums
    --> compiler evaluates enums to integers (not type safe)
    --> this can cause poor comparisons (fruits == colors)
    
    enum Color {
        COLOR_RED // found in the global namespace (Color color {COLOR_RED})
    };
    
2. Solution: Enum Classes
    --> strongly typed (type safe) and strongly scoped
    --> no need to prefix values with the enum type anymore (redundant)

    enum class Color {
        RED // found in the color namespace (Color color {Color::RED})
    }; // strongly scoped

    // each enum class is a unique type (type safe)    
    Color color {Color::RED}
    std::cout << color; // does not work
    if (fruits == colors) // does not work
