/*
 * Author:  Justin Nguyen
 * Created: 8/19/2016
 */
 
1. Exceptions
    --> provide a mechanism for decoupling error handling from
        your code's normal control flow
    --> allows for more freedom when handling error codes
    
2. Throw keyword
    --> a signal indicating that an exception has occurred
    --> can throw primitives, strings, etc.
    
3. Try keyword
    --> look for any exceptions that occur in this block
    
4. Catch keyword
    --> handles exceptions for a single data type

5. Try and Catch go together
    --> every try block must have at least one catch block attached to it
    
6. How exceptions work (behind the scenes)
    --> 1. an exception is thrown
        2. the program immediately jumps to the nearest enclosing try block
        3. if any catch handlers attached to that 
           try block handle that exception, then that handler executes
        4. else look for the next try block with an appropriate catch handler
        5. repeat until no try blocks left --> program fails with exception error

7. Don't have to put the throw statement inside a try block

    double MySqrt(double dX) {
        if (dX < 0.0)
            throw "Can not take sqrt of negative number"; // throw exception of type char*
        return sqrt(dX);
    }
     
    int main() {
        cout << "Enter a number: ";
        double dX;
        cin >> dX;
     
        // Look for exceptions that occur within try block and route to attached catch block(s)
        try {
            cout << "The sqrt of " << dX << " is " << MySqrt(dX) << endl;
        } catch (const char* strException) {
            cerr << "Error: " << strException << endl;
        }
    }
    
8. Why it's a good idea to pass errors back to the handler
    --> different applications may want to handle the error differently
    --> print an error message or display an error dialog
        might be fatal for one application, but not for the other
    --> also keeps the program more modular
        --> leave the error handling for the other parts of the code

9. Difference between asserts and exceptions
    --> asserts immediately stop the program's execution
    --> exceptions are handled and don't necessarily stop the program immediately



