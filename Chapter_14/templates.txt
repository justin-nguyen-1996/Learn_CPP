/*
 * Author:  Justin Nguyen
 * Created: 8/18/2016
 */

1. Function Templates
	--> functions that act as patterns for other functions
	--> don't have to specify the exact type of the variable
	--> use template type parameters

2. Example
	--> template <typename T>
		T max(T var_1, T var_2) {
			return (var_1 > var_2) ? var_1 : var_2;
		}
	--> keyword template indicates that the following will
		be a list of template type parameters
	
3. Example of more than one template type
	--> template <typename T1, typename T2>

4. Instantiating Templates
	--> no machine language is generated at compile time
	--> compiler replicates the template and then
		replaces all instances of "T" with the actual variable type
	--> compiler only creates one instance per set of unique type params
	--> if template exists but not called, no instance is created
	--> templates are compiled like normal types
		--> the operators and variable types must already be defined
		--> comparing instances of the Cents class with '>' operator,
			i.e. need to overload the '>' operator for the template

5. Defining a template member outside of the class
	--> template <typename T>
		int class_name<T>::fxn_name(T var_1) {}

6. Templates are very useful for containers
	--> allow containers (like std::array<T>) to work with many data types
	--> syntax is ugly, error messages are long and cryptic, but useful

7. Splitting up template classes
	--> use three files
	--> template class header goes in the .h file
	--> template class member functions go in the .cpp file
	--> template instances go in a templates.cpp file
		--> // Ensure the full Array template definition can be seen
			#include "Array.h"
			#include "Array.cpp"
			 
			// Explicitly instantiate template Array<int>
			template class Array<int>; 
			
			// Explicitly instantiate template Array<double>
			template class Array<double>; 
	--> the "template class" command causes the 
		compiler to explicitly instantiate the templated class


