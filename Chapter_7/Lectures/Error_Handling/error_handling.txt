/*
    Author:  Justin Nguyen
    Created: 7/6/2016
*/

1. When can assumption errors occur?
    --> when the program receives input from the user or a file
    --> when a function receives input (is called)
    --> when a function returns
    
2. Example Fixes
    
    // Only print if cstring is non-null
    if (cstring)
        std::cout << cstring;
        
    int index = hello.find(ch);
    if (index != -1) // handle case where find() failed to find the character in the string
        std::cout << ch << " was found at index " << index << '\n';
    else
        std::cout << ch << " wasn't found" << '\n';
        
    --> return error message, ask again for new input
    
3. Error Stream
    --> void printString(const char *cstring) {
            // Only print if strString is non-null
                if (cstring)
                    std::cout << cstring;
                else
            std::cerr << "function printString() received a null parameter";
        }
    --> use cerr to output to screen or file
    --> used to log errors
    
4. Assert Statements
    --> an all-in-one if statement, error printing statement, and program termination
    --> 
        #include <cassert>
        int getArrayValue(const std::array<int, 10> &array, int index) {
            // we're asserting that index is between 0 and 9
            assert(index >= 0 && index <= 9); // this is line 6 in Test.cpp
         
            return array[index];
        }

5. Don't get confused
    --> Asserts are for sanity checks and making sure the program
        is not in an unstable state --> everything is as expected
    --> Error Handling is for handling normal cases and reporting
        errors nicely to the user
    --> Exceptions are for exceptional cases
    
6. Using asserts
    --> use liberally but main purpose is for sanity checks/debugging
    --> avoid overuse, will be removed from release builds

