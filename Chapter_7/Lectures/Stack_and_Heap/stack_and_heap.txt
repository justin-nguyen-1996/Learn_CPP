/*
	Author:  Justin Nguyen
	Created: 7/4/2016
*/

1. Memory in a program is divided into several segments
	--> code segment
			--> where the compiled program sits in memory, read-only
	--> bss segment
			--> where un-initialized global and static vars are stored 
	--> data segment
			--> where initialized global and static vars are stored 
	--> heap
			--> where dynamically allocated variables are allocated from
	--> call stack
			--> where fxn params, local vars, and fxn-related info is stored

2. Heap Segment ("Free Store")
	--> memory used for dynamically memory allocation

	--> int* ptr1 = new int; // continuous block of 4 bytes on the heap
		int* ptr2 = new int; // continuous block of 4 bytes on the heap
		/* ptr1 and ptr2 may not be connected to each other though */

	--> deleting pointer does not delete the var, 
		only returns the memory back to the operating system

	--> disadvantages
		--> allocating memory on the heap is comparatively slow
		--> allocated memory stays allocated until specifically deallocated
			--> memory leaks
		--> access through a pointer is slower than direct access
	
	--> advantages
		--> the heap is a very large pool of memory
		--> large arrays, structs, and classes can be stored here 
		
3. Call Stack ("Stack")
	--> keeps track of all active functions (those that have not terminated) 
	--> handles allocation of all function parameters and local variables
	
	--> when the program starts, the main() function is pushed on the stack by the operating system
	--> when a function call is encountered, the function is pushed onto the call stack
	--> when the current function ends, that function is popped off the call stack
	--> the “items” we’re pushing and popping on the stack are called stack frames
	
	--> the stack pointer keeps track of the top of the stack
	
