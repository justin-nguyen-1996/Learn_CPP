/*
	Author:  Justin Nguyen
	Created: 7/3/2016
*/

1. Benefits of functions
	--> code can be re-used
	--> easier to change function than every instance of the change
	--> copying and pasting code is asking for broken code
	--> easier to read and understand 
		(don't need to know how a fxn is implemented to call it)
	--> type checking

2. Downsides of functions
	--> calling them produces significant overhead
		--> need to save the return location
		--> need to perform a branch there and branch back
		--> need to save snapshot of all registers and values
		--> need to create variables for parameters and assign values

3. Why use inline functions
	--> gets the benefit of readable code and no overhead
	--> compiler automatically expands the function definition in place
	--> no branching or anything, but still read as a function call

	inline int min(int x, int y) {
		return x > y ? y : x;
	}

	int main() {
		std::cout << min(5,6) << '\n';
			// std::cout << (5 > 6 ? 6 : 5) << '\n';
		std::cout << min(3,2) << '\n';
			// std::cout << (3 > 2 ? 2 : 3) << '\n';
		return 0;
	}

4. When to use inline functions
	--> only use for short functions
	--> expands code for every call of the inline function
	--> potential for code bloat (faster but uses up more memory)


