/*
    Author:  Justin Nguyen
    Created: 6/10/2016
*/

1. Fixed Arrays
    --> array size must be a compile-time constant (not a run-time constant)
    --> int array[4]; // works
    --> int x = 4; int array[x]; // does not work
    
2. Initializing Arrays
    --> all elements not specified in the initializer list are set to zero
    --> int array[4] = {} // array = {0, 0, 0, 0}
    
3. Omitted Array Size
    --> int array[] = {1, 2, 3, 4}; // compiler knows array size, works

4. Array Documentation

    IF USING ENUMS

    enum StudentNames {
        KENNY,
        KYLE,
        STAN,
        BUTTERS,
        CARTMAN,
        MAX_STUDENTS // good to have, auto "resizes" the array
    };
 
    int main() {
        int testScores[MAX_STUDENTS];
        testScores[STAN] = 76; // better than testScores[2] = 76;
     
        return 0;
    }
    
    IF USING ENUM CLASSES
    
    int main() {
        testScores[static_cast<int> StudentNames::STAN] = 76 // really annoying
    }
    
    TRY USING ENUMS INSIDE A NAMESPACE
    
    namespace StudentNames {
        enum Student Names {
            KENNY, // etc.
        }
    }
    
    int main() {
        testScores[StudentNames::STAN] = 76;
    }
    
    
    
