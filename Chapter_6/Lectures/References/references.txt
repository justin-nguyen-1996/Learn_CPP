/*
    Author:  Justin Nguyen
    Created: 6/21/2016
*/

1. References
    --> a variable type that acts as an alias to another variable
    --> int x = 5; int& ref = x;
    
    cout << &value; // prints 0012FF7C
    cout << &ref; // prints 0012FF7C
    
2. Can only reference variables of the same type
    --> const int x = 5;
        int& ref = x; // invalid, non-const reference to const object

3. References are Implicity Const
    --> cannot be reassigned (bound to the variable it references)
    
    int value = 5;
    int& ref = value; // valid reference
    int& invalidRef; // invalid, needs to reference something
    
    int value1 = 5;
    int value2 = 6;
    int& ref = value1; // okay, ref is now an alias for value1
    ref = value2; // does not work (assigns 6 the value of value2) 

4. References to const variables
	const int value = 5;
	const int& ref = value;
	ref = 6; // does not work

	int value = 5;
	const int& ref = value;
	ref = 6; // does not work
	value = 7; // works
    
    
5. Passing References as Function Parameters
	--> copies the value of the reference
	void changeN(int& ref) { ref = 6; }
	int main() {int n = 5; changeN(n); } // n = 6
	void changeN2(const int& ref) { ref = 6; } // does not work

6. Why to use references over pointers
	--> easier to use 
		(act like the object they refer to)
		(no dereferencing needed)
	--> safer too
		(always refer to an object since they are implicitly constant)
		(no such thing as a null or dangling reference)

7. Reference Implementation
	--> supposedly varies
	--> but most likely implemented using pointers

	void someFxn(int& ref) --> void someFxn(int* ref)
	int value = 4;
	int& ref = value; --> int* ref = &value;
	ref = 5; --> *ref = 5;

8. Differences between References and Pointers
	--> can't be null
	--> must be initialized
	--> can't be pointed at something else

	--> references are (const var* const pointers) that can't be null
	--> pointers that are implicitly dereferenced
	--> slightly more limited in functionality 
		(e.g. can't dynamically allocate memory)

9. Using References as Shortcuts
	--> struct Something {
			int value1;
			float value2;
		};
			 
		struct Other {
			Something something;
		    int otherValue;
		};
					  
		Other other;

	--> other.something.value1 = 4;
		int& ref = other.something.value1;
		ref = 4;


