/*
    Author:  Justin Nguyen
    Created: 6/27/2016
*/

1. Void Pointers
    --> pointers that can be pointed at anything
    --> must be type casted before being dereferenced
        
    int value = 5;
    void* voidPtr = &value;
     
    //cout << *voidPtr << endl; // illegal: cannot dereference a void pointer
    
    int* intPtr = static_cast<int*>(voidPtr); // however, if we cast our void pointer to an int pointer...
    cout << *intPtr << endl; // then we can dereference it like normal

2. Void Pointer Arithmetic
    --> can't do pointer arithmetic on void pointers
        (don't know the size of the variable)

3. Void References
    --> can't have void references
        (no such thing as a variable of type void)
        
4. Try to Avoid Void Pointers

