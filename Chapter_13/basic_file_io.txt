/*
 * Author:  Justin Nguyen
 * Created: 8/18/2016
 */
 
1. File Stream
    --> #include <fstream>
    --> ifstream, ofstream, fstream

2. Steps to using a file stream
    --> open the file by instantiating an object of the appropriate file stream
    --> read/write to the stream using the extraction/insertion operators
    --> close the file by calling close() or by
        letting the file I/O object go out of scope (the destructor will close the file)

3. Example (writing to a file)

    #include <fstream>
    #include <iostream>
    #include <cstdlib> // for exit()
     
    int main() {
        using namespace std;
        ofstream outf("Sample.dat");
        if (!outf) {
            cerr << "Uh oh, Sample.dat could not be opened for writing!" << endl;
            exit(1);
        }
     
        // We'll write two lines into this file
        outf << "This is line 1" << endl;
        outf << "This is line 2" << endl;
    	
        // When outf goes out of scope, the ofstream
        // destructor will close the file
    }
    
4. Example (reading from a file)
    
    same as above except:
    
    while (inf) {
        std::string str;
        getline(inf, str);
        cout << str;
    }
    
5. Buffered Output
    --> output is often buffered (i.e. not immediately written to disk)
    --> writing to the disk is called "flushing"
    --> closing a file automatically flushes the buffer so usually not a problem
    --> problems occur when the buffer is not flushed properly
        --> usually occurs when the program crashes or when the file is not closed
        --> calling exit() does not invoke the file's destructor, so file is not closed
        --> meaning data in the buffer is lost
    --> can flush using ostream::flush
    --> flushing too much can decrease performance (so don't use endl too much)

