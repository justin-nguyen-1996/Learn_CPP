/*
 * Author:  Justin Nguyen
 * Created: 8/22/2016
 */

1. auto, nullptr, enum classes

2. static_assert()
	--> normal assert() checks for things at runtime
	--> static_assert() checks for things at compile time
		--> primarily useful for 
			-->	checking sizeof() things
			--> checking values of #defines
			--> checking if C++11 is supported
				--> static_assert(__cplusplus > 199711L, "message_here")

3. Overriding virtual functions
	--> if the derived class's function fails to match the
		base class's function prototype/signature exactly,
		then a new function will be created instead of 
		overriding the original function
	--> need to use same parameters, return type, and const
	--> also happens when base fxn changes, but derived version not updated
	
	--> override identifier
		--> class Derived: public Base
			virtual void A(int x) override;

4. Final keyword
	--> can make functions non-overridable --> void A() final
	--> can make classes non-inheritable --> class Base final
	--> makes things immutable


